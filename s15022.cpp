
///////////////////////////////////////////////////////////////////////////////
//	ぷよぷよ

#include "el.h"

#define MAIN_SCREEN 1

//画面用の関数のプロトタイプ
void MainScreen(void);

DDOBJ puyo;				// ぷよのビットマップ
int field[15][8];		// 画面データ
int cmb[15][8];			// 結合チェック用
bool elist[30];			// 消すリスト

///////////////////////////////////////////////////////////////////////////////
//	メイン関数

//プログラム起動後、一番最初に呼び出される関数。
int elMain("ぷよぷよ");
{
	elWindow(256, 448, FALSE);
	//このループ内で処理がされる。
	//この中をグルグルと回転することで、リアルタイムでの処理が実現。
	elLoop()
	{
　　//先ほど定義したMAIN_SCREENを、宣言したMainScreen関数にリンク。
	//これで、簡単に任意の画面を呼び出すことができる。
		elSetScreen(MAIN_SCREEN,MainScreen());
	}	
	//メイン関数終了で自動的に終了処理。
	elExitMain();
}

///////////////////////////////////////////////////////////////////////////////
//	ウインドウ生成関数

void elCreate(void)
{
	elDraw::Screen(256, 448);　//256×448ドットのウィンドウ
	// ぷよ画像読み込み
	puyo = elDraw::LoadObject("puyo.bmp");
	// フィールドをクリア
	for (int y = 0; y < 15; y++) {
		for (int x = 0; x < 8; x++) {
    //ぷよが全部埋まるまでのウインドウ動作
			if (x == 0 || x == 7 || y == 14) field[y][x] = 5;
			else field[y][x] = -1;
		}
	}
	elCallScreen(MAIN_SCREEN);
}

///////////////////////////////////////////////////////////////////////////////
//	キーボード関数

// 　何かキー入力があると、呼び出される関数。
// Windowsが何かキー入力を受け取ると、ここに押されたキーを渡す。
void elKeyboard(void)
{
	//[ESC]キーが押されている。
	// VK_ESCAPEとは、[ESC]キーの仮想キーコード。
case VK_ESCAPE:
	{
　　//プログラムを終了。
		elDraw::Exit();
		break;
	}
  //キーボード関数終了。
	elExitKeyboard();
}

///////////////////////////////////////////////////////////////////////////////
//	イベント関数

//Windowsでのイベントを受け取ると、呼び出される関数。
//Windowsのメッセージを拾いたい場合の定義。上のelKeyboard関数同様、内部で処理。
long elEvent(void)
{
//イベント終了。
	elExitEvent();
}
